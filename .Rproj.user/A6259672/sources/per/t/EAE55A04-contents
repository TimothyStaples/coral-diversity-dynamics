## ##################################################### ####
# Coexistence of species in Huon Holocence transect data ####
# Author:    Timothy L Staples                           ####
# ###################################################### ####
#            working directory ####
rm(list = ls())
setwd("/home/timothy/Dropbox/Tim/Post-doc/Research projects/huon_cooccur")

# path outside repository to save large files generated by code. These are
# non-essential files and can be generated using the repository, but it saves
# time to save the re-load them, especially for complext models.
large_file_path <- "/home/timothy/University files - offline/Post-doc/large data file storage/huon_cooccur"

#
#            packages ####

library(vegan) # matrix randomisation algorithms
library(lme4) # mixed-effect modelling
library(multcomp) # post-hoc comparisons
library(netassoc) # species co-occurrence via networks
library(igraph) # make networks
library(gamm4) # mixed-effect additive models
library(econullnetr) # null modelling options for networks
library(mgcv) # additive modelling
library(rstan) # bayesian modelling
library(brms) # automated functions for stan (like making code and data)
library(splines) # for bs() to create custom splines
library(fun)
library(gamm4) # multi-level GAMs
library(merTools) # predict from merMod-style mixed-effects models
library(rgl)
library(evd)
library(MASS)
library(DHARMa)
library(TeachingDemos) # for drop shadow around text


# Mapping libraries
library(maptools)
library(sp)
library(rgdal)
library(rgeos)
library(raster)
library(fields)
library(smoothr)
library(sf)
library(prettymapr)
library(grImport2)
library(grConvert)

#            functions ####

sapply(list.files(path = "./functions", pattern = ".R", full.names = TRUE),
       source)

date.wrap <- function(string, ext){
  paste0(string, " ", Sys.Date(), ext)
}

rotateCoords <- function(crds, angle=0, center= c(min(crds[,1]),min(crds[,2]))) {
  co <- cos(-angle*pi/180)
  si <- sin(-angle*pi/180)
  adj <- matrix(rep(center,nrow(crds)),ncol=2,byrow=TRUE)
  crds <- crds-adj
  cbind(co * crds[,1] - si * crds[,2],
        si * crds[,1] + co * crds[,2]) + adj
}

# predict from a mixed-effects model - used to bootstrap confidence intervals
mer.ci <- function(model, newdata, sims){
  
  # a little function to fit to boot.MER
  predFun <- 
  
  # bootstrap predictions  
  bb <- bootMer(model, 
                nsim=sims, 
                FUN=function(fit){predict(fit, newdata, re.form=NA)})
  
  # extract quantiles over simulations to get CIs
  cis <- t(apply(bb$t, 2, function(x){quantile(x, c(0.025, 0.975))}))

  return(data.frame(fit = bb$t0,
                    lower = cis[,1],
                    upper = cis[,2]))
    
}

# extract model coefs and predictions from stan model
extract.stan.coefs <- function(model, model.pars, pred.pars, pred.mat){
  
  all.coefs <- summary(model)$summary
  
  model.coefs <- all.coefs[grepl(model.pars, rownames(all.coefs)), ]
  
  pred.coefs <- all.coefs[grepl(pred.pars, rownames(all.coefs)), ]
  
  pred.df <- cbind(pred.mat, pred.coefs)
  
  return(list(model.coefs, pred.df))
}

# unscale data scaled using scale()
unscale <- function(var){
  var * attr(var, "scaled:scale") + attr(var, "scaled:center")
}

unscale.man <- function(var, scale, center){
  var*scale + center
}

# lighten and darken colors
darken <- function(color, factor=1.4){
  col <- col2rgb(color)
  col <- col/factor
  col <- rgb(t(col), maxColorValue=255)
  col
}

lighten <- function(color, factor=1.4){
  col <- col2rgb(color)
  col <- col*factor
  col <- rgb(t(col), maxColorValue=255)
  col
}

#
#            Data import ####
#                      Huon peninsula fossil transects ####

huon_tr <- read.csv("./raw.datafiles/huon_intercept_data.csv")
huon_site <- read.csv("./raw.datafiles/huon_transect_data.csv")

huon_tr <- merge(huon_tr, huon_site[, c("transect", "site", "locality",
                                     "transect.age", "date.sigma",
                                     "date.ldi", "date.udi")],
               by.x = "transect", by.y = "transect")

# Just want hermatypic coral
huon_coral<-droplevels(huon_tr[huon_tr$species.fact=="herm.coral" &
                                 !is.na(huon_tr$species.fact),])

# get growth form counts for each tape in each transect
huon_coral$tr.tape<-paste0(huon_coral$transect, "_", huon_coral$tape)

# subset only sites with reasonable temporal resolution
loc.rep<-table(huon_site$locality[!duplicated(huon_site$transect)])
locs<-names(loc.rep[loc.rep>=5])
locs<-locs[locs != "Sang River NW"]
locs.order <- c(2,3,4,1,8,9,5,7,6)

huon_coral<-droplevels(huon_coral[huon_coral$locality %in% locs,])

huon_coral$genus[huon_coral$genus == "Acropora/Isopora"] = "Acropora"
huon_coral <- droplevels(huon_coral)

#                     GBR sediment cores ####

gbr_core <- read.csv("./raw.datafiles/gbr_dated_composition_data.csv")
gbr_site <- read.csv("./raw.datafiles/gbr_sedimentcore_core.csv")

gbr_core <- droplevels(gbr_core[!gbr_core$taxon %in% c("Mollusc", "Unknown", "Corallinales"),])

# Calculate diversity at time-points ####

huon_coral$int.cm = huon_coral$int.delta * 100
rare.sample <- min(with(huon_coral[!is.na(huon_coral$genus),],
                        tapply(int.cm, transect, sum)))

huon.div <- ts.diversity(data = huon_coral[,c("locality", "transect.age", "genus", "int.cm")],
                         rare.sample = rare.sample)

gbr.div <- ts.diversity(data = gbr_core[,c("coreID", "age.mean", "taxon", "raw.abund")],
                        rare.sample = rare.sample)

# beta diversity models ####

huon.div.models <- beta.model(data=huon.div$div.data,
                              test.model=FALSE, 
                              knots=6, 
                              name="huon",
                              ts.col = c("red", "darkgreen", "red", "darkgreen", "red", "blue", "darkgreen", "blue", "blue"))

gbr_site$coreID <- gsub(" ", "_", gbr_site$coreID)
gbr.regions <- droplevels(gbr_site$region[match(as.character(unique(gbr.div$div.data$ts)),
                                                as.character(gbr_site$coreID))])

data=gbr.div$div.data
test.model=FALSE
knots=6
name="gbr"
ts.col = c("red", "darkgreen", "blue", "orange")[gbr.regions]


gbr.div.models <- beta.model(data=gbr.div$div.data,
                             test.model=FALSE, 
                             knots=6, 
                             name="gbr",
                             ts.col = c("red", "darkgreen", "blue", "orange")[gbr.regions])

# TIME-SPACE CORRELATION ####

# Let's see how much of our time-space we actually have filled, and whether
# there is any confounding of these effects (if some sections of the study region
# were all from the earlier part of the overall time-series, for example)

huon_loc <- huon_site[!duplicated(huon_site$locality),]

rownames(huon_loc) = huon_loc$locality

huon_loc$distance <- sapply(huon_loc$locality, function(x){

  gc.dist(lat1= huon_loc["Midway Cove", "latitude"],
          lon1 = huon_loc["Midway Cove", "longitude"],
          lat2= huon_loc[x, "latitude"],
          lon2= huon_loc[x, "longitude"])  
  
})

huon_site <- merge(huon_site, huon_loc[,c("distance","locality")],
                   all.x=TRUE, all.y=FALSE)
huon_site <- huon_site[huon_site$locality %in% locs, ]

pdf(date.wrap("./plots/sample scale", ".pdf"), height=3.5, width=5)
par(mar=c(3,3,1,1), ps=8, tcl = -0.25, mgp=c(3,0.5,0), las=1)
plot(huon_site$distance ~ huon_site$transect.age, pch=21,
     bg=c("blue","red","darkgreen")[huon_site$site], xaxt="n",
     xlim=c(9000,6000), ylim=c(0,30), type="n", xlab="", ylab="")
sapply(split(huon_site, f=huon_site$locality), function(x){
 
  segments(x0=min(x$transect.age),
           x1=max(x$transect.age),
           y0=x$distance[1],
           y1=x$distance[1]) 
  
})
points(huon_site$distance ~ huon_site$transect.age, pch=21,
       bg=c("blue","red","darkgreen")[huon_site$site])

axis(side=1, mgp=c(3,0.2,0))
mtext(side=1, line=1.25, text="Years before present")
mtext(side=2, line=1.5, text="Distance from southern-most locality (km)", las=0)

polygon(x = c(par("usr")[2], 6500, 6500, 8600, 8600, par("usr")[1],
              par("usr")[1], 7550, 7550, par("usr")[2]),
        y = c(24, 24, 14, 14, par("usr")[4], par("usr")[4], 
              5, 5, par("usr")[3], par("usr")[3]),
        col="grey30")

dev.off()

cor(huon_site[,c("distance", "transect.age")])
dist.model <- lm(distance ~ transect.age, data=huon_site)
#abline(lm(distance ~ transect.age, data=huon_site))

# NEW FRAMEWORK ####

# I think I've been lacking a simple framework to assess change through time
# for these data. I think what I want to do is do a GAMM for each site explicitly,
# then one for all sites together (with random intercepts).

# Then we can have several types of dynamics.
# No overall trend = Communities stay the same (perhaps 'equilibrium'?)
# Uni-directional trend = Consistent change over time (perhaps tracking environment?)
# More dynamic trend = Case specific.

# We can also have several types of how the site-trends match the overall trend
# All sites similar to overall trend = trend present in all sites
# No sites similar to overall trend = chaos, individual responses
# Some sites similar to overall trend (or similar to eachother) = small-scale trends

# We can then start with simple metrics, like growth form and taxonomic richness
# (alpha & beta), then decompose them down into more detailed analyses

# Let's try out our framework on simple site richness.

#                 Alpha richness (genus & growth form) ####

rich.df <- do.call("rbind", lapply(split(huon_coral, f=huon_coral$transect), function(x){
  
  
  mat.sub <- table(droplevels(x$genus))
  gr.mat.sub <- table(droplevels(x$growth.form))
  
  data.frame(genus.alpha = length(unique(x$genus)),
             genus.shannon = vegan::diversity(mat.sub, "shannon"),
             genus.rarefy = rarefy(mat.sub, sample=rare.sample),
             genus.chao = estimateR(mat.sub)["S.chao1"],
             
             gr.alpha = length(unique(x$growth.form)),
             gr.shannon = vegan::diversity(gr.mat.sub, "shannon"),
             gr.rarefy = rarefy(gr.mat.sub, sample=rare.sample),
             gr.chao = estimateR(gr.mat.sub)["S.chao1"],
             
             tape.length=sum(sapply(split(x, f=x$tape), function(y){max(y$int.end)})),
             transect=x$transect[1],
             locality=x$locality[1],
             site=x$site[1],
             pred.date=x$transect.age[1],
             pred.lhdi=x$date.ldi[1],
             pred.uhdi=x$date.udi[1],
             pred.sigma=x$date.sigma[1])
  
})) 

cor(rich.df[,c("genus.alpha", "genus.shannon", "genus.rarefy", "genus.chao")])
cor(rich.df[,c("gr.alpha", "gr.shannon", "gr.rarefy", "gr.chao")])

# get rid of transects with no predicted date
rich.df <- droplevels(rich.df[!is.na(rich.df$pred.date),])

# add coordinate info for spatial autocorrelation test
rich.df <- merge(rich.df, huon_site[!duplicated(huon_site$locality),
                                    c("locality", "latitude", "longitude")],
                 by.x="locality", by.y="locality",
                 all.x=TRUE, all.y=FALSE)

# Run models
hist(rich.df$genus.rarefy)

genrich.loc.m <- model.localities1(data=rich.df, response="genus.chao", knots= 4,
                                  gam.family="gaussian")

genrich.all.m <- model.overall.trend1(data=rich.df, response="genus.chao", knots=4,
                                     gam.family="gaussian")

grrich.loc.m <- model.localities1(data=rich.df, response="genus.chao", knots=4,
                                 gam.family="gaussian")

grrich.all.m <- model.overall.trend1(data=rich.df, response="genus.chao", knots=4,
                                    gam.family="gaussian")


#                 Alpha diversity (relative) ####
rich.df <- do.call("rbind", lapply(split(rich.df, f=rich.df$locality), function(x){
  print(x$locality[1])
  x$top.date.diff <- max(x$pred.date) - x$pred.date
  return(x)
}))

genrich.loc.relative <- model.localities.relative(data=rich.df, 
                                           response="genus.chao", knots= 4,
                                           gam.family="gaussian",
                                           date.diff=FALSE)

genrich.all.relative <- model.overall.trend.relative(data=rich.df, 
                                              response="genus.chao", knots=4,
                                              gam.family="gaussian")

grrich.loc.relative <- model.localities.relative(data=rich.df, 
                                                 response="genus.chao", knots= 4,
                                                 gam.family="gaussian",
                                                 date.diff=FALSE)

grrich.all.relative <- model.overall.trend.relative(data=rich.df, 
                                                    response="genus.chao", 
                                                    knots=4,
                                                    gam.family="gaussian")


#                 Beta richness (genus & growth form) ####
#                                Genus (real time) ####

beta.df <- huon_site[!duplicated(huon_site$transect),
                     c("transect", "site", "locality", "latitude", "longitude",
                       "transect.age", "date.sigma"), ]
beta.df <- droplevels(beta.df[beta.df$transect %in% huon_coral$transect &
                   !is.na(beta.df$transect.age),])

genus.mat.prop <- do.call("rbind", 
                          lapply(split(huon_coral, f=huon_coral$transect), 
                                 function(x){
  
  x <- x[x$intercept != "unknown", ]
  
  temp <- tapply(x$int.delta, x$genus, sum) / sum(x$int.delta[!is.na(x$genus)])
  ifelse(is.na(temp), 0, temp)
}))

genus.by.locality <- huon_coral[!duplicated(huon_coral$transect), 
                                c("transect", "locality", 
                                  "transect.age", "site")]

genus.turnover <- do.call("rbind",
                          lapply(split(genus.by.locality,
                                       f=genus.by.locality$locality),
                          function(x){
                          
                            x <- x[order(x$transect.age, decreasing=TRUE),]
                            
                            loc.mat <- genus.mat.prop[match(as.character(x$transect),
                                                               rownames(genus.mat.prop)),]
                            
                            loc.mat <- loc.mat[, colSums(loc.mat) >0]
                            
                            dist.mat <- 1 - as.matrix(vegdist(loc.mat, method="jaccard"))
                            
                            x$top.diss <- c(NA, dist.mat[1,-1])
                            x$seq.diss <- c(NA, diag(dist.mat[-1,-dim(dist.mat)[1]]))
                            x$date.diff <- c(NA, x$transect.age[-nrow(x)] - x$transect.age[-1])
                            x$top.date.diff <- x$transect.age[1] - x$transect.age
                    
                            return(x)
                          }))

colnames(genus.turnover)[colnames(genus.turnover)=="transect.age"] = "pred.date"

genus.region.beta.loc.m <- model.localities1(data=genus.turnover, 
                                            response="seq.diss", 
                                            knots=4,
                                            gam.family="gaussian",
                                            date.diff=TRUE)

genus.region.beta.all.m <- model.overall.trend1(data=genus.turnover, 
                                               response="seq.diss", 
                                               knots=4,
                                               gam.family="gaussian",
                                               date.diff=TRUE)

genus.region.beta.sds <- plot.trends(file.name = "./plots/genus turnover",
                           overall.model = genus.region.beta.all.m,
                           locality.model = genus.region.beta.loc.m,
                           axis.label = paste0("Bray-curtis dissimilarity"),
                           overall.ylims = c(0.05,0.6),
                           locality.ylims = c(0,1),
                           transform="none",
                           int.ylims=c(0.025,0),
                           slope.ylims=c(0,20))

genus.top.beta.loc.m <- model.localities1(data=genus.turnover, 
                                            response="top.diss", 
                                            knots=4,
                                            gam.family="gaussian",
                                          date.diff=FALSE)

genus.top.beta.all.m <- model.overall.trend1(data=genus.turnover[!is.na(genus.turnover$top.diss),], 
                                               response="top.diss", 
                                               knots=4,
                                             gam.family="gaussian",
                                             date.diff=FALSE)
#                                Growth form (real time) ####

beta.df <- huon_site[!duplicated(huon_site$transect),
                     c("transect", "site", "locality", "latitude", "longitude",
                       "transect.age", "date.sigma"), ]
beta.df <- droplevels(beta.df[beta.df$transect %in% huon_coral$transect &
                                !is.na(beta.df$transect.age),])

gr.mat.prop <- do.call("rbind", 
                          lapply(split(huon_coral, f=huon_coral$transect), 
                                 function(x){
                                   
                                   x <- x[x$intercept != "unknown", ]
                                   
                                   temp <- tapply(x$int.delta, x$growth.form, sum) / 
                                     sum(x$int.delta[!is.na(x$growth.form)])
                                   ifelse(is.na(temp), 0, temp)
                                 }))

gr.by.locality <- huon_coral[!duplicated(huon_coral$transect), 
                                c("transect", "locality", 
                                  "transect.age", "site")]

gr.turnover <- do.call("rbind",
                          lapply(split(gr.by.locality,
                                       f=gr.by.locality$locality),
                                 function(x){
                                   
                                   x <- x[order(x$transect.age, decreasing=TRUE),]
                                   
                                   loc.mat <- gr.mat.prop[match(as.character(x$transect),
                                                                   rownames(gr.mat.prop)),]
                                   
                                   loc.mat <- loc.mat[, colSums(loc.mat) >0]
                                   
                                   dist.mat <- 1 - as.matrix(vegdist(loc.mat, method="jaccard"))
                                   
                                   x$top.diss <- c(NA, dist.mat[1,-1])
                                   x$seq.diss <- c(NA, diag(dist.mat[-1,-dim(dist.mat)[1]]))
                                   x$date.diff <- c(NA, x$transect.age[-nrow(x)] - x$transect.age[-1])
                                   x$top.date.diff <- x$transect.age[1] - x$transect.age
                                   
                                   return(x)
                                 }))

colnames(gr.turnover)[colnames(gr.turnover)=="transect.age"] = "pred.date"


gr.top.beta.loc.m <- model.localities1(data=gr.turnover, 
                                            response="top.diss", 
                                            knots=4,
                                            gam.family="gaussian",
                                            date.diff=FALSE)

gr.top.beta.all.m <- model.overall.trend1(data=gr.turnover[!is.na(gr.turnover$top.diss),], 
                                               response="top.diss", 
                                               knots=4,
                                          gam.family="gaussian",
                                          date.diff=FALSE)

genus.region.beta.sds <- plot.trends(file.name = "./plots/growth form turnover (from top) abs time",
                                     overall.model = genus.region.beta.all.m,
                                     locality.model = genus.region.beta.loc.m,
                                     axis.label = paste0("Bray-curtis dissimilarity"),
                                     overall.ylims = c(0,1),
                                     locality.ylims = c(0,1),
                                     transform="none",
                                     int.ylims=c(0.05,0),
                                     slope.ylims=c(0,0.7))

gr.region.beta.loc.m <- model.localities1(data=gr.turnover, 
                                            response="seq.diss", 
                                            knots=4,
                                          gam.family="gaussian",
                                         date.diff=TRUE)

gr.region.beta.all.m <- model.overall.trend1(data=gr.turnover, 
                                               response="seq.diss", 
                                               knots=4,
                                             gam.family="gaussian",
                                            date.diff=TRUE)

genus.region.beta.sds <- plot.trends(file.name = "./plots/growth form turnover",
                                     overall.model = genus.region.beta.all.m,
                                     locality.model = genus.region.beta.loc.m,
                                     axis.label = paste0("Bray-curtis dissimilarity"),
                                     overall.ylims = c(0.05,0.6),
                                     locality.ylims = c(0,1),
                                     transform="none",
                                     int.ylims=c(0.015,0),
                                     slope.ylims=c(0,1.9))


#                                Genus (relative) ####


genus.relative.beta.topdiss <- model.localities.relative(data=genus.turnover,
                                                 response="top.diss",
                                                 knots=4,
                                                 gam.family="gaussian",
                                                 date.diff=FALSE)

genus.relative.beta.topdiss.overall <- model.overall.trend.relative(data=genus.turnover,
                                                                 response="top.diss",
                                                                 knots=4,
                                                                 gam.family="gaussian",
                                                                 date.diff=FALSE)

genus.relative.beta.seqdiss <- model.localities.relative(data=genus.turnover,
                                                         response="seq.diss",
                                                         knots=4,
                                                         gam.family="gaussian",
                                                         date.diff=FALSE)

genus.relative.beta.seqdiss.overall <- model.overall.trend.relative(data=genus.turnover,
                                                                    response="seq.diss",
                                                                    knots=4,
                                                                    gam.family="gaussian",
                                                                    date.diff=FALSE)


#                                Growth form (relative) ####

gr.relative.beta.topdiss <- model.localities.relative(data=gr.turnover,
                                                      response="top.diss",
                                                      knots=4,
                                                      gam.family="gaussian",
                                                      date.diff=FALSE)

gr.relative.beta.topdiss.overall <- model.overall.trend.relative(data=gr.turnover,
                                                                 response="top.diss",
                                                                 knots=4,
                                                                 gam.family="gaussian",
                                                                 date.diff=FALSE)

gr.relative.beta.seqdiss <- model.localities.relative(data=gr.turnover,
                                                      response="seq.diss",
                                                      knots=4,
                                                      gam.family="gaussian",
                                                      date.diff=FALSE)

gr.relative.beta.seqdiss.overall <- model.overall.trend.relative(data=gr.turnover,
                                                                    response="seq.diss",
                                                                    knots=4,
                                                                    gam.family="gaussian",
                                                                    date.diff=FALSE)

#                 Plot ####
#                         Overall diversity trends ####
# this is a 2x2 plot of alpha and beta diversity for growth form and genus richness.

pdf(date.wrap("./plots/diversity models", ".pdf"), height=5.25, width=4.25, useDingbats = FALSE)

par(mfrow=c(3,2), mar=c(0,0,0,0), oma=c(3.5,5,2,1), 
    ps=10, mgp=c(3,0.5,0), tcl = -0.25, las=1)

loc.models <- list(genrich.loc.m,
                   grrich.loc.m,
                   genus.region.beta.loc.m,
                   gr.region.beta.loc.m,
                   genus.top.beta.loc.m,
                   gr.top.beta.loc.m)

all.models <- list(genrich.all.m,
                   grrich.all.m,
                   genus.region.beta.all.m,
                   gr.region.beta.all.m,
                   genus.top.beta.all.m,
                   gr.top.beta.all.m)

sapply(1:6, function(n){

  # set up plot
  if(n %in% c(1,2)){ylims=c(2,30)}
  if(n %in% c(3,4)){ylims=c(0.25,1)}
  if(n %in% c(5,6)){ylims=c(0,1.05)}
  
  plot(x=NULL, y=NULL, xlim=c(9100,5900), ylim=ylims, 
       axes=FALSE, yaxs="i")
  
  
  if(n %in% c(1,3,5)){
    axis(side=2)
    mtext(side=2, line=2, 
          text=c("Rarefied richness (n = 14)",
                 "Similarity to\nprevious time-point",
                 "Similarity to\nfirst time-point")[(n + 1) / 2],
          cex=0.8, las=0)
    } else {axis(side=2, labels=NA)}
  
  
  axis(side=1, at=seq(6000,9000,500), labels=NA, tcl= -0.125)
  axis(side=1, at=seq(6000,9000,1000), labels=NA)
  
  if(n %in% c(5,6)){
    par(xpd=NA)
    text(x=seq(6000,9000,1000),
         y=relative.axis.point(-0.05, "y"),
         labels=paste0(seq(6,9,1),",000"), 
         srt=30, adj=1)
    par(xpd=FALSE)
    
  }
  
  if(n==5){
    mtext(side=1, at=par("usr")[2], line=2.15,
          text="Years before present", cex=0.8)
  }
  
  if(n %in% c(1:2)){
    mtext(side=3, line=0.2, text=c("Taxonomic (genera)", 
                                   "Functional groups (growth form)")[n], 
          font=2, cex=0.8)
  }
  
   # plot overall trajectory
  temp.all <- all.models[[n]]
  all.preds <- temp.all[[2]]
  
  polygon(x=c(all.preds$raw.date, rev(all.preds$raw.date)),
          y=c(all.preds$upper, rev(all.preds$lower)),
          col="grey85", border=NA)
  
  lines(all.preds$fit ~ all.preds$raw.date, lwd=2)
  
  # plot locality trajectories
  temp.loc <- loc.models[[n]]
  loc.preds <- temp.loc[[2]]
  
  loc.preds$temp.col <- c("blue","red","darkgreen")[loc.preds$site]
  
  sapply(split(loc.preds, f=loc.preds$locality), function(x){
  
    lines(x$fit ~ x$raw.date, col=x$temp.col[1])
    
  })
  
  sapply(split(loc.preds, f=loc.preds$locality), function(x){
    
  text(x=x$raw.date[1],
       y=x$fit[1],
       pos=4, offset=0.25,
       labels=locs.order[locs %in% x$locality[1]],
       col=x$temp.col[1])
  })
  
  text(x=relative.axis.point(0.025, "x"),
       y=relative.axis.point(0.93, "y"),
       labels=paste0("(", letters[n], ")"), font=2, adj=0)
  
  box()
  
})

dev.off()

#                         Relative diversity trends ####

pdf(date.wrap("./plots/relative diversity models", ".pdf"), 
    height=5.25, width=4.25, useDingbats = FALSE)

par(mfrow=c(3,2), mar=c(0,0,0,0), oma=c(3.5,5,2,1), 
    ps=10, mgp=c(3,0.5,0), tcl = -0.25, las=1)

loc.models <- list(genrich.loc.relative,
                   grrich.loc.relative,
                   genus.relative.beta.seqdiss,
                   gr.relative.beta.seqdiss,
                   genus.relative.beta.topdiss,
                   gr.relative.beta.topdiss)

all.models <- list(genrich.all.relative,
                   grrich.all.relative,
                   genus.relative.beta.seqdiss.overall,
                   gr.relative.beta.seqdiss.overall,
                   genus.relative.beta.topdiss.overall,
                   gr.relative.beta.topdiss.overall)
n<-3
sapply(1:6, function(n){
  
  # set up plot
  if(n %in% c(1,2)){ylims=c(2,7)}
  if(n %in% c(3,4)){ylims=c(0.25,1)}
  if(n %in% c(5,6)){ylims=c(0,1.05)}
  
  plot(x=NULL, y=NULL, xlim=c(0,2100), ylim=ylims, 
       axes=FALSE, yaxs="i", xlab="", ylab="")
  
  
  if(n %in% c(1,3,5)){
    axis(side=2)
    mtext(side=2, line=2, 
          text=c("Rarefied richness (n = 14)",
                 "Similarity to\nprevious time-point",
                 "Similarity to\nfirst time-point")[(n + 1) / 2],
          cex=0.8, las=0)
  } else {axis(side=2, labels=NA)}
  
  
  axis(side=1, at=seq(0,2500,500), labels=NA, tcl= -0.125)
  axis(side=1, at=seq(0,2500,1000), labels=NA)
  
  if(n %in% c(5,6)){
    par(xpd=NA)
    text(x=seq(0,2500,1000),
         y=relative.axis.point(-0.05, "y"),
         labels=c(0, paste0(seq(1,2,1),",000")), 
         srt=30, adj=1)
    par(xpd=FALSE)
    
  }
  
  if(n==5){
    mtext(side=1, at=par("usr")[2], line=2.15,
          text="Years from time-series start", cex=0.8)
  }
  
  if(n %in% c(1:2)){
    mtext(side=3, line=0.2, text=c("Taxonomic (genera)", 
                                   "Functional groups (growth form)")[n], 
          font=2, cex=0.8)
  }
  
  # plot overall trajectory
  temp.all <- all.models[[n]]
  all.preds <- temp.all[[2]]
  
  polygon(x=c(all.preds$raw.date, rev(all.preds$raw.date)),
          y=c(all.preds$upper, rev(all.preds$lower)),
          col="grey85", border=NA)
  
  lines(all.preds$fit ~ all.preds$raw.date, lwd=2)
  
  # plot locality trajectories
  temp.loc <- loc.models[[n]]
  loc.preds <- temp.loc[[2]]
  
  loc.preds$temp.col <- c("blue","red","darkgreen")[loc.preds$site]
  
  sapply(split(loc.preds, f=loc.preds$locality), function(x){
    
    lines(x$fit ~ x$raw.date, col=x$temp.col[1])
    
  })
  
  sapply(split(loc.preds, f=loc.preds$locality), function(x){
    
    text(x=rev(x$raw.date)[1],
         y=rev(x$fit)[1],
         pos=4, offset=0.25,
         labels=locs.order[locs %in% x$locality[1]],
         col=x$temp.col[1])
  })
  
  text(x=relative.axis.point(0.025, "x"),
       y=relative.axis.point(0.93, "y"),
       labels=paste0("(", letters[n], ")"), font=2, adj=0)
  
  box()
  
})

dev.off()

#                         Beta diversity ordination plots (not really useful) ####

# the two beta diversity metrics could be thought of as different types
# of Euclidean distance in an ordination.
# - comparing bin-to-bin dissimilarities is like taking the Euc distance
# between two points in nMDS space.
# - comparing each point to the first point is like taking the distance
# between the first time point and all others
# We could plot these to see if we get the same patterns.

#                         bin-to-bin dissimilarity ####

genus.ord <- metaMDS(genus.mat.prop, index="jaccard")
plot(genus.ord)

genus.points <- as.data.frame(genus.ord$points)
genus.points$transect <- rownames(genus.points)
genus.points <- merge(genus.points, huon_site[,c("transect.age", "transect",
                                                 "locality", "site")],
                      all.x=TRUE, all.y=FALSE,
                      by.x="transect", by.y="transect")

dist.points <- do.call("rbind", lapply(unique(genus.points$locality),
                                       function(x){
                                         
                                         sub.points <- genus.points[genus.points$locality==x,]
                                         sub.points <- sub.points[order(sub.points$transect.age, decreasing=TRUE),]
                                         
                                         dist.combs <- cbind(1:(nrow(sub.points)-1), 2:nrow(sub.points))
                                         
                                         sub.points$seq.dist <- c(NA, apply(dist.combs, 1, function(y){
                                           dist(sub.points[y, c("MDS1", "MDS2")])
                                         }))
                                         
                                         dist.combs <- cbind(1, 2:nrow(sub.points))
                                         
                                         sub.points$top.dist <- c(NA, apply(dist.combs, 1, function(y){
                                           dist(sub.points[y, c("MDS1", "MDS2")])
                                         }))
                                         
                                         
                                         return(sub.points)
                                         
                                       }))

summary(dist.points$top.dist)

dist.points$col <- c("blue","red","darkgreen")[dist.points$site]

pdf(date.wrap("./plots/locality ordination distances over time", ".pdf"), height=2.5, width=6)
par(mfrow=c(1,2), mar=c(0,0,0,0), oma=c(2,2,2,2), ps=10, tcl= -0.25, mgp=c(3,0.5,0), las=1)

x.pos <- (1:nrow(dist.points))[as.factor(dist.points$transect.age)]

plot(x=NULL, y=NULL, 
     xlim=summary(x.pos)[c(1,6)],
     ylim=c(-1, 1))

segments(y0 = 0 - 0.5*dist.points$seq.dist,
         y1 = 0 + 0.5*dist.points$seq.dist,
         x0 = x.pos,
         x1 = x.pos,
         col = dist.points$col, lwd=2)

plot(x=NULL, y=NULL, 
     xlim=summary(x.pos)[c(1,6)],
     ylim=c(-1, 1))

segments(y0 = 0 - 0.5*dist.points$top.dist,
         y1 = 0 + 0.5*dist.points$top.dist,
         x0 = x.pos,
         x1 = x.pos,
         col = dist.points$col, lwd=2)

dev.off()


plot(dist.points$seq.dist ~ dist.points$transect.age)


#                         plot to compare seq and top trends ####

pdf(date.wrap("./plots/top and seq beta compared comb", ".pdf"), height=3.4, width=6,
    useDingbats = FALSE)
par(mfrow=c(1,2), mar=c(0,0,0,0), oma=c(3,3,1,1), ps=10, tcl=-0.25, mgp=c(3,0.5,0), las=1)

plot(x=NULL, y=NULL, xlim=c(0,1), ylim=c(0,1), xlab="", ylab="", asp=1,
     xaxt="n", yaxs="i", xaxs="i")

axis(side=1, mgp=c(3,0.25,0))
axis(side=1,at=seq(0,1,0.1), tcl=-0.125, labels=NA)
axis(side=2,at=seq(0,1,0.1), tcl=-0.125, labels=NA)

mtext(side=1, line=1.25, text="Similarity to first time-point")
mtext(side=2, line=2, text="Similarity to previous time-point", las=0)

all.top <- genus.top.beta.all.m[[2]]
all.seq <- genus.region.beta.all.m[[2]]

# polygon(x=c(all.top$upper, rev(all.top$lower)),
#         y=c(all.seq$upper, rev(all.seq$lower)),
#         border=NA, col="grey85")

rect(xleft=4.35, xright=6.15, ybottom=3.1, ytop=6.35, col="grey80", border=NA)

lines(all.seq$fit ~ all.top$fit, lwd=1.5)

library(shape)

Arrows(x0=all.top$fit[2],
       y0=all.seq$fit[2],
       x1=all.top$fit[1],
       y1=all.seq$fit[1],
       arr.type="triangle", arr.width=0.25, arr.length=0.25)

loc.color <- data.frame(locality=unique(huon_coral$locality))
loc.color$col <- c("blue","red","darkgreen")[huon_tr$site[match(loc.color$locality,
                                                              huon_tr$locality)]]

sapply(unique(huon_coral$locality), function(x){
  
  top.preds <- genus.top.beta.loc.m[[2]]
  top.preds <- top.preds[top.preds$locality == x, ]
  seq.preds <- genus.region.beta.loc.m[[2]]
  seq.preds <- seq.preds[seq.preds$locality == x, ]
  
  lines(seq.preds$fit ~ top.preds$fit,
        col=loc.color$col[loc.color$locality==x])  
  
  Arrows(x0=top.preds$fit[2],
         y0=seq.preds$fit[2],
         x1=top.preds$fit[1],
         y1=seq.preds$fit[1],
         arr.type="triangle", arr.width=0.125, arr.length=0.125,
         col=loc.color$col[loc.color$locality==x])
  
})

text(x=relative.axis.point(0.02, "x"),
     y=relative.axis.point(0.95, "y"),
     labels="(a) Genus", font=2, adj=0)

# GROWTH FORMS

plot(x=NULL, y=NULL, xlim=c(0,1), ylim=c(0,1), xlab="", ylab="", asp=1,
     xaxt="n", yaxs="i", xaxs="i", yaxt="n")

axis(side=1, mgp=c(3,0.25,0))
axis(side=1,at=seq(0,1,0.1), tcl=-0.125, labels=NA)

axis(side=2, labels=NA)
axis(side=2,at=seq(0,1,0.1), tcl=-0.125, labels=NA)

mtext(side=1, line=1.25, text="Similarity to first time-point")

all.top <- gr.top.beta.all.m[[2]]
all.seq <- gr.region.beta.all.m[[2]]

# polygon(x=c(all.top$upper, rev(all.top$lower)),
#         y=c(all.seq$upper, rev(all.seq$lower)),
#         border=NA, col="grey85")

rect(xleft=4.35, xright=6.15, ybottom=3.1, ytop=6.35, col="grey80", border=NA)

lines(all.seq$fit ~ all.top$fit, lwd=1.5)

library(shape)

Arrows(x0=all.top$fit[2],
       y0=all.seq$fit[2],
       x1=all.top$fit[1],
       y1=all.seq$fit[1],
       arr.type="triangle", arr.width=0.25, arr.length=0.25)

loc.color <- data.frame(locality=unique(huon_coral$locality))
loc.color$col <- c("blue","red","darkgreen")[huon_tr$site[match(loc.color$locality,
                                                                huon_tr$locality)]]

sapply(unique(huon_coral$locality), function(x){
  
  top.preds <- gr.top.beta.loc.m[[2]]
  top.preds <- top.preds[top.preds$locality == x, ]
  seq.preds <- gr.region.beta.loc.m[[2]]
  seq.preds <- seq.preds[seq.preds$locality == x, ]
  
  lines(seq.preds$fit ~ top.preds$fit,
        col=loc.color$col[loc.color$locality==x])  
  
  Arrows(x0=top.preds$fit[2],
         y0=seq.preds$fit[2],
         x1=top.preds$fit[1],
         y1=seq.preds$fit[1],
         arr.type="triangle", arr.width=0.125, arr.length=0.125,
         col=loc.color$col[loc.color$locality==x])
  
})

text(x=relative.axis.point(0.02, "x"),
     y=relative.axis.point(0.95, "y"),
     labels="(b) Growth form", font=2, adj=0)

dev.off()





#                         compare genus and gr richness trends ####

pdf(date.wrap("./plots/genus & gr richness compared", ".pdf"), height=3.5, width=3.5,
    useDingbats = FALSE)
par(mar=c(3,3,1,1), ps=10, tcl=-0.25, mgp=c(3,0.5,0), las=1)
plot(x=NULL, y=NULL, xlim=c(3,6.5), ylim=c(2,6.5), xlab="", ylab="", asp=1,
     xaxt="n")

axis(side=1, at=3:7, mgp=c(3,0.25,0))
axis(side=1,at=seq(3,7,0.5), tcl=-0.125, labels=NA)
axis(side=2,at=seq(3,7,0.5), tcl=-0.125, labels=NA)

mtext(side=1, line=1.25, text="Growth form diversity")
mtext(side=2, line=1.5, text="Genus diversity", las=0)

all.top <- grrich.all.m[[2]]
all.seq <- genrich.all.m[[2]]

# polygon(x=c(all.top$upper, rev(all.top$lower)),
#         y=c(all.seq$upper, rev(all.seq$lower)),
#         border=NA, col="grey85")

library(shape)

loc.color <- data.frame(locality=unique(huon_coral$locality))
loc.color$col <- c("blue","red","darkgreen")[huon_tr$site[match(loc.color$locality,
                                                                huon_tr$locality)]]
sapply(unique(huon_coral$locality), function(x){
  
  with(rich.df[rich.df$locality == x,],
       points(genus.rarefy ~ gr.rarefy,
              pch=16, col=loc.color$col[loc.color$locality==x],
              cex=0.4))
  
})

rect(xleft=par("usr")[1], xright=par("usr")[2],
     ybottom=par("usr")[3], ytop=par("usr")[4],
     border=NA, col=rgb(1,1,1,0.7))

Arrows(x0=all.top$fit[2],
       y0=all.seq$fit[2],
       x1=all.top$fit[1],
       y1=all.seq$fit[1],
       arr.type="triangle", arr.width=0.25, arr.length=0.25)

lines(all.seq$fit ~ all.top$fit, lwd=1.5)

sapply(unique(huon_coral$locality), function(x){
  
  top.preds <- grrich.loc.m[[2]]
  top.preds <- top.preds[top.preds$locality == x, ]
  seq.preds <- genrich.loc.m[[2]]
  seq.preds <- seq.preds[seq.preds$locality == x, ]
  
  lines(seq.preds$fit ~ top.preds$fit,
        col=loc.color$col[loc.color$locality==x])  
  
  Arrows(x0=top.preds$fit[2],
         y0=seq.preds$fit[2],
         x1=top.preds$fit[1],
         y1=seq.preds$fit[1],
         arr.type="triangle", arr.width=0.125, arr.length=0.125,
         col=loc.color$col[loc.color$locality==x])
  
})

quantile(rich.df$genus.rarefy)
rect(xleft=4.35, xright=6.15, ybottom=3.1, ytop=6.35, border="black", lwd=3)
#rect(xleft=4.72, xright=5.67, ybottom=4.285, ytop=5.5, border="black")

dev.off()

# ####
# GBR Cores ####
